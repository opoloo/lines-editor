// Generated by CoffeeScript 1.7.1
(function() {
  var editor;

  editor = {
    cm: '',
    default_value: '# New document\n\nStart writing your story here...',
    init: function(selector, theme) {
      if (theme == null) {
        theme = 'light';
      }
      this.bind_events();
      this.load_documents();
      return this.cm = CodeMirror($(selector)[0], {
        value: this.default_value,
        mode: {
          name: 'markdown',
          highlightFormatting: true
        },
        lineWrapping: true,
        tabSize: 2,
        theme: 'lines-' + theme
      });
    },
    bind_events: function() {
      $(document).on('click', '.btn-action', function(e) {
        var action;
        action = $(this).data('action');
        switch (action) {
          case 'new':
            return editor.new_document();
          case 'save':
            return editor.save_document();
        }
      });
      $(document).on('change', '.documents', function(e) {
        return editor.load_document($(this).val());
      });
      $(document).on('change', '.font-size', function(e) {
        return editor.set_font_size($(this).val());
      });
      return $(document).on('change', '.theme', function(e) {
        return editor.set_theme($(this).val());
      });
    },
    new_document: function() {
      this.cm.setValue(this.default_value);
      this.cm.clearHistory();
      return $(".documents").val("new");
    },
    load_document: function(id) {
      if (id === "new") {
        return this.new_document();
      } else {
        return this.cm.setValue(JSON.parse(localStorage.getItem(id)).content);
      }
    },
    set_font_size: function(size) {
      return $('.CodeMirror').css("font-size", size + "px");
    },
    set_theme: function(theme) {
      this.cm.setOption('theme', theme);
      $('#editor').removeClass("lines-light");
      $('#editor').removeClass("lines-dark");
      return $('#editor').addClass(theme);
    },
    load_documents: function() {
      var documents, i, keys;
      documents = [];
      keys = Object.keys(localStorage);
      i = 0;
      while (i < keys.length) {
        documents.push(JSON.parse(localStorage.getItem(keys[i])));
        i++;
      }
      return $.each(documents, function(key, doc) {
        return $(".actions .documents").append('<option value="' + documents[key].id + '">' + documents[key].title + '</option>');
      });
    },
    save_document: function() {
      var doc, doc_id, docname;
      docname = prompt('Please name your document', 'New document');
      if (docname) {
        doc_id = this.generate_uuid();
        doc = {
          id: doc_id,
          created_at: Date.now(),
          updated_at: Date.now(),
          title: docname,
          content: this.cm.getValue()
        };
        localStorage.setItem(doc_id, JSON.stringify(doc));
        return alert('File successfully saved.');
      }
    },
    generate_uuid: function() {
      var uuid;
      var chars, i, r, rnd, uuid;
      chars = '0123456789abcdef'.split('');
      uuid = [];
      rnd = Math.random;
      r = void 0;
      i = 0;
      uuid[8] = uuid[13] = uuid[18] = uuid[23] = '-';
      uuid[14] = '4';
      while (i < 36) {
        if (!uuid[i]) {
          r = 0 | rnd() * 16;
          uuid[i] = chars[i === 19 ? r & 0x3 | 0x8 : r & 0xf];
        }
        i++;
      }
      return uuid.join('');
    }
  };

  window.editor = editor;

}).call(this);
